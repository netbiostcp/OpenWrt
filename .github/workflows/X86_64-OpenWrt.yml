name: X86_64 OpenWrt

on:
  workflow_dispatch:
  schedule:
    - cron: 0 19 * * *

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: configs/x86_64.config # This is correct, assuming your .config is in your repo's configs folder
  DIY_SCRIPT: diy-script.sh
  CLASH_KERNEL: amd64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: X86_64
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-22.04

    steps:
    - name: 🚀 Free Disk Space (Optional but Recommended)
      run: |
        echo "::group::Freeing up disk space"
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        echo "::endgroup::"
        df -h

    - name: 🔧 Install Build Dependencies
      run: |
        echo "::group::Installing build dependencies"
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential git libncurses5-dev zlib1g-dev gawk flex unzip file wget \
                                 libssl-dev python3 python3-distutils rsync subversion mercurial locales curl
        sudo timedatectl set-timezone "$TZ"
        echo "::endgroup::"

    - name: 📈 Combine Disks (Optional)
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024

    - name: 📥 Checkout Workflow Repository
      # This checks out your current repository where openwrt_build.yml, configs/x86_64.config,
      # and diy-script.sh are located.
      uses: actions/checkout@v4

    - name: ⬇️ Clone OpenWrt Source Code
      run: |
        echo "::group::Cloning OpenWrt source"
        df -hT $GITHUB_WORKSPACE
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        # Record Git info for Release description
        echo "COMMIT_AUTHOR=$(git show -s --date=short --format="作者: %an")" >> $GITHUB_ENV
        echo "COMMIT_DATE=$(git show -s --date=short --format="时间: %ci")" >> $GITHUB_ENV
        echo "COMMIT_MESSAGE=$(git show -s --date=short --format="内容: %s")" >> $GITHUB_ENV
        echo "COMMIT_HASH=$(git show -s --date=short --format="hash: %H")" >> $GITHUB_ENV
        echo "::endgroup::"

    - name: ✨ Update and Install Feeds
      # This step is crucial. It updates and installs the OpenWrt feeds,
      # bringing in all package definitions and build system components.
      # This must run BEFORE you try to copy your .config or run make defconfig initially.
      run: |
        echo "::group::Updating and installing feeds"
        cd $OPENWRT_PATH
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        echo "::endgroup::"

    - name: ⚙️ Prepare Configuration & Generate Variables
      # Now that feeds are installed, the 'configs/' directory (and its contents like x86_64.config)
      # from the OpenWrt source itself should be present.
      # You can now safely copy your custom config and run make defconfig.
      run: |
        echo "::group::Preparing configuration"
        cd $OPENWRT_PATH
        # Your custom config is in the *workflow* repo, so use GITHUB_WORKSPACE to access it
        cp $GITHUB_WORKSPACE/$CONFIG_FILE .config
        make defconfig > /dev/null 2>&1
        # Extract variables from .config
        SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
        echo "::endgroup::"

    - name: ⚡ Cache Toolchain (Optional)
      if: env.CACHE_TOOLCHAIN == 'true'
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: false
        mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
        prefix: ${{ env.OPENWRT_PATH }}

    - name: ➕ Apply Custom Modifications (DIY Script)
      run: |
        echo "::group::Applying custom modifications"
        cd $OPENWRT_PATH
        # Move 'files' directory if it exists in your workflow repo
        [ -d "$GITHUB_WORKSPACE/files" ] && mv "$GITHUB_WORKSPACE/files" "$OPENWRT_PATH/files"
        
        # Make scripts executable
        chmod +x "$GITHUB_WORKSPACE/$DIY_SCRIPT"
        # Assuming scripts folder might be in your workflow repo or DIY_SCRIPT handles paths
        # chmod +x $GITHUB_WORKSPACE/scripts/*.sh # Uncomment if you have a scripts folder in your workflow repo
        
        # Run your DIY script
        "$GITHUB_WORKSPACE/$DIY_SCRIPT"
        
        # Example: Run other preset scripts if they are in your workflow repo's 'scripts' directory
        # "$GITHUB_WORKSPACE/scripts/preset-clash-core.sh" "$CLASH_KERNEL"
        # "$GITHUB_WORKSPACE/scripts/preset-terminal-tools.sh"
        # "$GITHUB_WORKSPACE/scripts/preset-adguard-core.sh" "$CLASH_KERNEL"
        echo "::endgroup::"

    - name: 📦 Download all packages
      run: |
        echo "::group::Downloading packages"
        cd $OPENWRT_PATH
        make defconfig # Rerun defconfig to incorporate changes from DIY script
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        echo "::endgroup::"

    - name: 🛠️ Compile the Firmware
      id: compile
      run: |
        echo "::group::Compiling firmware"
        cd $OPENWRT_PATH
        mkdir -p files/etc/uci-defaults
        # Example: Copy init-settings.sh from your workflow repo if it exists
        # [ -e "$GITHUB_WORKSPACE/scripts/init-settings.sh" ] && cp "$GITHUB_WORKSPACE/scripts/init-settings.sh" files/etc/uci-defaults/99-init-settings
        
        echo "Compiling with $(nproc) threads..."
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::endgroup::"
        
        # Set output and environment variables
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV
        # Extract kernel version and firmware path
        echo "KERNEL=$(cat $OPENWRT_PATH/bin/targets/*/*/openwrt-*-kernel.bin.manifest 2>/dev/null | grep ^kernel | cut -d- -f2 | tr -d ' ')" >> $GITHUB_ENV
        echo "FIRMWARE_PATH=$OPENWRT_PATH/bin/targets/${DEVICE_TARGET}/${DEVICE_SUBTARGET}" >> $GITHUB_ENV

    - name: 📊 Check Space Usage (Optional)
      if: (!cancelled())
      run: df -hT

    - name: 🗂️ Organize Files for Upload
      if: steps.compile.outputs.status == 'success'
      run: |
        echo "::group::Organizing files"
        cd $FIRMWARE_PATH
        cat sha256sums
        cp $OPENWRT_PATH/.config build.config
        mkdir -p packages
        find $OPENWRT_PATH/bin/packages -name "*.ipk" -exec mv -f {} packages/ \;
        tar -zcf Packages.tar.gz packages
        rm -rf packages feeds.buildinfo version.buildinfo
        echo "::endgroup::"

    - name: ⬆️ Upload Bin Directory (Optional)
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.SOURCE_REPO }}-bin-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: ${{ env.OPENWRT_PATH }}/bin

    - name: 📤 Upload Firmware To Artifacts (Temporary)
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.SOURCE_REPO }}-firmware-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE_PATH }}/*

    - name: 📦 Create Release and Upload Firmware
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
      uses: ncipollo/release-action@v1
      with:
        name: R${{ env.DATE }} for ${{ env.FIRMWARE_TAG }}
        allowUpdates: true
        tag: ${{ env.FIRMWARE_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.FIRMWARE_PATH }}/*
        body: |
          **This is OpenWrt Firmware for ${{ env.FIRMWARE_TAG }}**
          ### 📒 固件信息
          - 💻 平台架构: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          - ⚽ 固件源码: ${{ env.REPO_URL }}
          - 💝 源码分支: ${{ env.REPO_BRANCH }}
          - 🚀 内核版本: ${{ env.KERNEL }}
          - 🌐 默认地址: 192.168.1.1
          - 🔑 默认密码: password
          ### 🧊 固件版本
          - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
          - ${{ env.COMMIT_AUTHOR }}
          - ${{ env.COMMIT_DATE }}
          - ${{ env.COMMIT_MESSAGE }}
          - ${{ env.COMMIT_HASH }}
